proxmox_qemu_card:
  variables:
    name: Server Name
    vm_id: Proxmox VM ID
  type: custom:button-card
  name: '[[[ return variables.name ]]]'
  entity: '[[[ return ''sensor.qemu_'' + variables.vm_id + ''_status'' ]]]'
  show_state: true
  show_icon: false
  tap_action:
    action: none
  hold_action:
    action: none
  double_tap_action:
    action: none
  styles:
    grid:
      - grid-template-areas: '"n n s" "cpu_usage memory_usage last_boot" "start stop restart"'
      - grid-template-columns: 1fr 1fr 1fr
      - grid-template-rows: 1fr 1fr 1fr
    card:
      - border-radius: 20px
      - font-size: 20px
      - padding: 0px 20px
      - background-color: '#2B1B2D'
    name:
      - justify-self: left
      - align-self: center
      - font-size: 26px
    state:
      - align-self: center
      - justify-self: right
      - color: |
          [[[
            return states['sensor.qemu_' + variables.vm_id + '_status'].state === 'running' ? 'green' : 'red';
          ]]]
    custom_fields:
      start:
        - padding-top: 10px
        - padding-bottom: 10px
        - justify-self: right
      stop:
        - padding-top: 10px
        - padding-bottom: 10px
        - justify-self: center
      restart:
        - padding-top: 10px
        - padding-bottom: 10px
        - justify-self: left
  custom_fields:
    cpu_usage: |
      [[[
        const cpu = parseFloat(states['sensor.qemu_' + variables.vm_id + '_cpu_used'].state).toFixed(2);
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:cpu-64-bit" style="width: 36px; height: 36px;"></ha-icon>
            <span>${isNaN(cpu) ? 'N/A' : cpu + '%'}</span>
          </div>
        `;
      ]]]
    memory_usage: |
      [[[
        const memory = parseFloat(states['sensor.qemu_' + variables.vm_id + '_memory_used_percentage'].state).toFixed(2);
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:memory" style="width: 36px; height: 36px;"></ha-icon>
            <span> ${isNaN(memory) ? 'N/A' : memory + '%'}</span>
          </div>
        `;
      ]]]
    last_boot: |
      [[[
        const lastBoot = new Date(states['sensor.qemu_frigate_server_305_last_boot'].state);
        const now = new Date();
        const diff = Math.floor((now - lastBoot) / 1000); // Difference in seconds
        const days = Math.floor(diff / 86400).toString().padStart(2, '0');
        const hours = Math.floor((diff % 86400) / 3600).toString().padStart(2, '0');
        const minutes = Math.floor((diff % 3600) / 60).toString().padStart(2, '0');
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:clock-outline" style="width: 36px; height: 36px;"></ha-icon>
            <span>${days}:${hours}:${minutes}</span>
          </div>
        `;
      ]]]
    start:
      card:
        type: custom:mushroom-chips-card
        chips:
          - type: template
            tap_action:
              action: perform-action
              perform_action: button.press
              target:
                entity_id: '[[[ return ''button.qemu_'' + variables.vm_id + ''_start'' ]]]'
            icon: mdi:play
            icon_color: green
            card_mod:
              style: |
                ha-card {
                  padding: 5px!important;
                  border-radius: 20px!important;
                } 
    stop:
      card:
        type: custom:mushroom-chips-card
        chips:
          - type: template
            tap_action:
              action: perform-action
              confirmation:
                text: Are you sure you want to shutdown?
              perform_action: button.press
              target:
                entity_id: >-
                  [[[ return 'button.qemu_' + variables.vm_id + '_shutdown'
                  ]]]
            icon: mdi:stop
            icon_color: red
            card_mod:
              style: |
                ha-card {
                  padding: 5px!important;
                  border-radius: 20px!important;
                } 
    restart:
      card:
        type: custom:mushroom-chips-card
        chips:
          - type: template
            tap_action:
              action: perform-action
              confirmation:
                text: Are you sure you want to reboot?
              perform_action: button.press
              target:
                entity_id: '[[[ return ''button.qemu_'' + variables.vm_id + ''_reboot'' ]]]'
            icon: mdi:restart
            icon_color: orange
            card_mod:
              style: |
                ha-card {
                  padding: 5px!important;
                  border-radius: 20px!important;
                }  
proxmox_lxc_card:
  variables:
    name: Server Name
    lxc_id: Proxmox LXC ID
  type: custom:button-card
  name: '[[[ return variables.name ]]]'
  entity: '[[[ return ''binary_sensor.lxc_'' + variables.lxc_id + ''_status'' ]]]'
  show_state: true
  show_icon: false
  tap_action:
    action: none
  hold_action:
    action: none
  double_tap_action:
    action: none
  styles:
    grid:
      - grid-template-areas: '"n n s" "cpu_usage memory_usage last_boot" "start stop restart"'
      - grid-template-columns: 1fr 1fr 1fr
      - grid-template-rows: 1fr 1fr 1fr
    card:
      - border-radius: 20px
      - font-size: 20px
      - padding: 0px 20px
      - background-color: '#1D2B1F'
    name:
      - justify-self: left
      - align-self: center
      - font-size: 26px
    state:
      - align-self: center
      - justify-self: right
      - color: |
          [[[
            return states['binary_sensor.lxc_' + variables.lxc_id + '_status'].state === 'on' ? 'green' : 'red';
          ]]]
    custom_fields:
      start:
        - padding-top: 10px
        - padding-bottom: 10px
        - justify-self: right
      stop:
        - padding-top: 10px
        - padding-bottom: 10px
        - justify-self: center
      restart:
        - padding-top: 10px
        - padding-bottom: 10px
        - justify-self: left
  custom_fields:
    cpu_usage: |
      [[[
        const cpu = parseFloat(states['sensor.lxc_' + variables.lxc_id + '_cpu_used'].state).toFixed(2);
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:cpu-64-bit" style="width: 36px; height: 36px;"></ha-icon>
            <span>${isNaN(cpu) ? 'N/A' : cpu + '%'}</span>
          </div>
        `;
      ]]]
    memory_usage: |
      [[[
        const memory = parseFloat(states['sensor.lxc_' + variables.lxc_id + '_memory_used_percentage'].state).toFixed(2);
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:memory" style="width: 36px; height: 36px;"></ha-icon>
            <span> ${isNaN(memory) ? 'N/A' : memory + '%'}</span>
          </div>
        `;
      ]]]
    last_boot: |
      [[[
        const lastBoot = new Date(states['sensor.qemu_frigate_server_305_last_boot'].state);
        const now = new Date();
        const diff = Math.floor((now - lastBoot) / 1000); // Difference in seconds
        const days = Math.floor(diff / 86400).toString().padStart(2, '0');
        const hours = Math.floor((diff % 86400) / 3600).toString().padStart(2, '0');
        const minutes = Math.floor((diff % 3600) / 60).toString().padStart(2, '0');
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:clock-outline" style="width: 36px; height: 36px;"></ha-icon>
            <span>${days}:${hours}:${minutes}</span>
          </div>
        `;
      ]]]
    start:
      card:
        type: custom:mushroom-chips-card
        chips:
          - type: template
            tap_action:
              action: perform-action
              perform_action: button.press
              target:
                entity_id: '[[[ return ''button.lxc_'' + variables.lxc_id + ''_start'' ]]]'
            icon: mdi:play
            icon_color: green
            card_mod:
              style: |
                ha-card {
                  padding: 5px!important;
                  border-radius: 20px!important;
                } 
    stop:
      card:
        type: custom:mushroom-chips-card
        chips:
          - type: template
            tap_action:
              action: perform-action
              confirmation:
                text: Are you sure you want to shutdown?
              perform_action: button.press
              target:
                entity_id: >-
                  [[[ return 'button.lxc_' + variables.lxc_id + '_shutdown'
                  ]]]
            icon: mdi:stop
            icon_color: red
            card_mod:
              style: |
                ha-card {
                  padding: 5px!important;
                  border-radius: 20px!important;
                } 
    restart:
      card:
        type: custom:mushroom-chips-card
        chips:
          - type: template
            tap_action:
              action: perform-action
              confirmation:
                text: Are you sure you want to reboot?
              perform_action: button.press
              target:
                entity_id: '[[[ return ''button.lxc_'' + variables.lxc_id + ''_reboot'' ]]]'
            icon: mdi:restart
            icon_color: orange
            card_mod:
              style: |
                ha-card {
                  padding: 5px!important;
                  border-radius: 20px!important;
                } 
proxmox_node_card:
  type: custom:button-card
  variables:
    name: Server Name
    node_id: Proxmox Node ID
  name: '[[[ return variables.name ]]]'
  entity: '[[[ return ''binary_sensor.node_'' + variables.node_id + ''_status'' ]]]'
  show_state: true
  show_icon: false
  tap_action:
    action: none
  hold_action:
    action: none
  double_tap_action:
    action: none
  styles:
    grid:
      - grid-template-areas: >-
          "n n s" "cpu_usage memory_usage last_boot" "disk updates vms"
          "restart restart restart"
      - grid-template-columns: 1fr 1fr 1fr
      - grid-template-rows: 1fr 1fr 1fr 1fr
    card:
      - border-radius: 20px
      - font-size: 20px
      - padding: 0px 20px
      - background-color: '#2B1B17'
    name:
      - justify-self: left
      - align-self: center
      - font-size: 26px
    state:
      - align-self: center
      - justify-self: right
      - color: |
          [[[
            return states['binary_sensor.node_' + variables.node_id + '_status'].state === 'on' ? 'green' : 'red';
          ]]]
    custom_fields:
      disk:
        - padding-top: 20px
      updates:
        - padding-top: 20px
      vms:
        - padding-top: 20px
      restart:
        - padding-top: 10px
        - padding-bottom: 10px
        - justify-self: center
  custom_fields:
    cpu_usage: |
      [[[
        const cpu = parseFloat(states['sensor.node_' + variables.node_id + '_cpu_used'].state).toFixed(2);
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:cpu-64-bit" style="width: 36px; height: 36px;"></ha-icon>
            <span>${isNaN(cpu) ? 'N/A' : cpu + '%'}</span>
          </div>
        `;
      ]]]
    memory_usage: |
      [[[
        const memory = parseFloat(states['sensor.node_' + variables.node_id + '_memory_used_percentage'].state).toFixed(2);
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:memory" style="width: 36px; height: 36px;"></ha-icon>
            <span> ${isNaN(memory) ? 'N/A' : memory + '%'}</span>
          </div>
        `;
      ]]]
    last_boot: |
      [[[
        const lastBoot = new Date(states['sensor.qemu_frigate_server_305_last_boot'].state);
        const now = new Date();
        const diff = Math.floor((now - lastBoot) / 1000); // Difference in seconds
        const days = Math.floor(diff / 86400).toString().padStart(2, '0');
        const hours = Math.floor((diff % 86400) / 3600).toString().padStart(2, '0');
        const minutes = Math.floor((diff % 3600) / 60).toString().padStart(2, '0');
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:clock-outline" style="width: 36px; height: 36px;"></ha-icon>
            <span>${days}:${hours}:${minutes}</span>
          </div>
        `;
      ]]]
    disk: |
      [[[
        const disk = parseFloat(states['sensor.node_' + variables.node_id + '_disk_used_percentage'].state).toFixed(2);
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:harddisk" style="width: 36px; height: 36px;"></ha-icon>
            <span>${isNaN(disk) ? 'N/A' : disk + '%'}</span>
          </div>
        `;
      ]]]
    updates: |
      [[[
        const updates = states['sensor.node_' + variables.node_id + '_total_updates'].state;
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:update" style="width: 36px; height: 36px;"></ha-icon>
            <span>${isNaN(updates) ? 'N/A' : updates + ' updates'}</span>
          </div>
        `;
      ]]]
    vms: |
      [[[
        const vms = states['sensor.node_' + variables.node_id + '_virtual_machines_running'].state;
        return `
          <div style="display: flex; flex-direction: column; align-items: center;">
            <ha-icon icon="mdi:server" style="width: 36px; height: 36px;"></ha-icon>
            <span>${isNaN(vms) ? 'N/A' : vms + ' VMs up'}</span>
          </div>
        `;
      ]]]
    restart:
      card:
        type: custom:mushroom-chips-card
        chips:
          - type: template
            tap_action:
              action: perform-action
              confirmation:
                text: Are you sure you want to reboot?
              perform_action: button.press
              target:
                entity_id: >-
                  [[[ return 'button.node_' + variables.node_id + '_reboot'
                  ]]]
            icon: mdi:restart
            icon_color: orange
            card_mod:
              style: |
                ha-card {
                  padding: 5px!important;
                  border-radius: 20px!important;
                }  
