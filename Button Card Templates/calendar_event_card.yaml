calendar_event_card:
  show_icon: false
  show_name: false
  styles:
    grid:
      - grid-template-areas: |
          [[[
            const events = states[variables.entity]?.attributes?.events || [];
            const event = events[variables.index] || {};
            const start = new Date(event.start || "");
            const end = new Date(event.end || "");

            // Convert to UTC date (prevents local timezone shifting)
            const startUTC = new Date(start.getUTCFullYear(), start.getUTCMonth(), start.getUTCDate());
            const endUTC = new Date(end.getUTCFullYear(), end.getUTCMonth(), end.getUTCDate());

            // Adjust end date for all-day events (subtract one day)
            if (end.getUTCHours() === 0 && end.getUTCMinutes() === 0) {
              endUTC.setDate(endUTC.getDate() - 1);
            }

            const duration = (endUTC - startUTC) / (1000 * 60 * 60 * 24);

            // If it's a multi-day event, adjust the grid template
            if (duration > 1) {
              return '"date event" "date event"';
            } else {
              return '"date time" "date event"';
            }
          ]]]
      - grid-template-columns: min-content 1fr
    card:
      - padding: 10px 20px
    custom_fields:
      time:
        - justify-self: start
        - font-size: 1.2em
        - padding-left: 20px
      date:
        - justify-self: start
        - font-size: 1.6em
        - text-transform: uppercase
        - padding-right: 20px
        - border-right: '1px solid #FFFFFF'
        - width: 100px
        - text-align: left
      event:
        - justify-self: start
        - padding-left: 20px
        - text-align: left
        - width: calc(100% - 20px)
        - white-space: normal
        - word-wrap: break-word
        - font-size: 1.4em
  custom_fields:
    date: |
      [[[
        const events = states[variables.entity]?.attributes?.events || [];
        const event = events[variables.index] || {};
        
        // Parse as UTC to avoid timezone shifting
        const start = new Date(event.start);
        const end = new Date(event.end);
        
        // Convert to UTC date (prevents local timezone shifting)
        const startUTC = new Date(start.getUTCFullYear(), start.getUTCMonth(), start.getUTCDate());
        let endUTC = new Date(end.getUTCFullYear(), end.getUTCMonth(), end.getUTCDate());

        // Adjust end date for all-day events (subtract one day)
        if (end.getUTCHours() === 0 && end.getUTCMinutes() === 0) {
          endUTC.setDate(endUTC.getDate() - 1);
        }

        const duration = (endUTC - startUTC) / (1000 * 60 * 60 * 24);
        
        if (duration > 1) {
          const startDateShort = helpers.formatDateShort(startUTC);
          const endDateShort = helpers.formatDateShort(endUTC);
          return `${startDateShort} -<br>${endDateShort}`;
        } else {
          return helpers.formatDateShort(startUTC);
        }
      ]]]
    time: |
      [[[
        const events = states[variables.entity]?.attributes?.events || [];
        const event = events[variables.index] || {};
        const start = event.start || "";

        if (!start) return ""; // No start date

        const startDate = new Date(start);

        // Check if the start date includes a time portion
        const isAllDay = startDate.getUTCHours() === 0 && startDate.getUTCMinutes() === 0;
        if (isAllDay) {
          return "";
        }

        return helpers.formatTime24h(startDate);
      ]]]
    event: |
      [[[
          const events = states[variables.entity]?.attributes?.events || [];
          const event = events[variables.index] || {};
          return event.summary || "No event summary";
        ]]]
